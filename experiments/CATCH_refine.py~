from pylorenzmie.analysis import Feature
from pylorenzmie.theory import LMHologram
from pylorenzmie.utilities import coordinates
from CATCH.CATCHobject import crop_frame
import cv2
import ast
import pandas as pd
from matplotlib import pyplot as plt
import numpy as np

def report(result):
    def value(val, err, dec=2):
        fmt = '{' + ':.{}f'.format(dec) + '}'
        return (fmt + ' +- ' + fmt).format(val, err)
    res = ['x_p = ' + value(result.x_p, result.dx_p) + ' [pixels]',
           'y_p = ' + value(result.y_p, result.dy_p) + ' [pixels]',
           'z_p = ' + value(result.z_p, result.dz_p) + ' [pixels]',
           'a_p = ' + value(result.a_p, result.da_p, 3) + ' [um]',
           'n_p = ' + value(result.n_p, result.dn_p, 4)]
    print('npixels = {}'.format(result.npix))
    print(*res, sep='\n')
    print('chisq = {:.2f}'.format(result.redchi))

def present(feature):
    fig, axes = plt.subplots(ncols=3, figsize=(10, 4), constrained_layout=True)

    vmin = np.min(feature.data) * 0.9
    vmax = np.max(feature.data) * 1.1
    style = dict(vmin=vmin, vmax=vmax, cmap='gray')

    images = [feature.data,
              feature.hologram(),
              feature.residuals()+1]
    labels = ['Data', 'Fit', 'Residuals']

    for ax, image, label in zip(axes, images, labels):
        ax.imshow(image, **style)
        ax.axis('off')
        ax.set_title(label)
    plt.show()

df = pd.read_csv('results_file.csv') #specify your ML preds file here
df['bbox'] = df['bbox'].apply(ast.literal_eval) #convert csv string to tuple

df = df[df['edge']==False] #remove features near the edge (optional)


refined = []
for index, row in df.iterrows():
    f = Feature(model=LMHologram(double_precision=False))
    
    # Instrument configuration
    ins = f.model.instrument
    ins.wavelength = 0.447     # [um]
    ins.magnification = 0.048  # [um/pixel]
    ins.n_m = 1.34

    #provide initial parameter estimates from ML
    p = f.particle
    p.properties = row

    #crop experimental data and give it to feature
    frame = cv2.imread(row.framepath, cv2.IMREAD_GRAYSCALE)
    crop = crop_frame(frame, [row])[0]
    
    f.data = crop/np.mean(crop)
    f.coordinates = coordinates(crop.shape, corner=row.bbox[0])

    #mask settings
    f.mask.percentpix = 0.2
    f.mask.distribution = 'radial'
    
    #fit
    result = f.optimize()
    report(result)

    #replace refined values in new df
    refrow = row.copy()
    newprops = pd.Series(f.particle.properties)
    refrow.update(newprops)
    refrow['redchi'] = result.redchi

    refined.append(refrow)

refined = pd.concat(refined)

refined.to_csv('refined_results_file.csv') #specify name of refined results file here
