import cv2, json
from matplotlib import pyplot as plt
import numpy as np
import os, os.path
from CATCH.CATCHobject import CATCH
from CATCH.Localizerv5_pip import Localizer
from CATCH.Estimator_Torch import Estimator
from pylorenzmie.analysis import Feature, Frame
import pandas as pd

est = Estimator(configuration='overlaps')
loc = Localizer()
catch = CATCH(estimator=est, localizer=loc)

for vidnum in range(1,18):
    savedict = []
    path = './norm_images/011420/flow_{}/'.format(vidnum)
    numimgs = len([f for f in os.listdir(path)if os.path.isfile(os.path.join(path, f))])

    #just do one at a time for now
    for i in range(numimgs):
        filepath = './norm_images/011420/flow_{}/image'.format(vidnum) + str(i).zfill(4) + '.png'
        localim = cv2.imread(filepath)
        #plt.imshow(localim)
        #plt.show()
        results = catch.analyze([localim])
        results['framepath'] = filepath
        if not results.empty:
            results['framenum'] = [i]*len(results['framenum'])
        savedict.append(results)
        print('Completed frame {}'.format(i), end='\r')
    savedict = pd.concat(savedict)
    print(savedict)
    savedict.to_csv('results/CATCH_overlaps_flowquad_preds_vid{}.csv'.format(vidnum), index=False)
    print('saved ML')

bloop()

firstimagepreds = features
firstimagepath = 'norm_images_{}/image{}.png'.format(vidnum, str(numimgs-1).zfill(4))
firstimg = cv2.imread(firstimagepath)
fig, ax = plt.subplots()
ax.imshow(firstimg, cmap='gray')
for feature in firstimagepreds:
    x = feature.model.particle.x_p
    y = feature.model.particle.y_p
    ax.scatter([x],[y], color='red')
plt.show()

example = features[0]

print('Example feature')
print(example.model.particle)
px = int(np.sqrt(example.data.size))
pix = (px,px)
cpix = estimator.pixels
    
h = example.model.hologram()
fig, (ax1, ax2) = plt.subplots(1,2)
ax1.imshow(np.clip(example.data.reshape(pix)*60, 0, 255), cmap='gray')
ax2.imshow(np.clip(h.reshape(pix)*60, 0, 255), cmap='gray')
fig.suptitle('Data, Predicted Hologram')
plt.show()
